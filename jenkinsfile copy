pipeline{
    agent any
        parameters {
            string(name: 'IMAGETAG', defaultValue: '1.0.0') // multiple assignments

        }
//
    environment{
        CRED_ID = 'ecr:us-east-1:fasionapp_id'

        ECR_REPO_NAME = 'fashionapp'
        ECR_REPO_URL = "389035013580.dkr.ecr.us-east-1.amazonaws.com"
        ECR_FULL_REPO_URL = 'https://${REPO_URL}/'

        ECS_CLUSTER_NAME = "fashonCluster"
        ECS_SERVICE_NAME = "fashionapp-svc"
    }

    stages{

        stage("Build & push to ECR"){

            steps{
                script{
                    // This step should not normally be used in your script. Consult the inline help for details.
                        withDockerRegistry(credentialsId: CRED_ID , url: FULL_REPO_URL ) {
                       
                             sh "docker build -t myapp:${params.IMAGETAG} ."

                             sh "docker tag myapp:${params.IMAGETAG}  ${ECR_REPO_URL}/${ECR_REPO_NAME}:${params.IMAGETAG}"

                             sh "docker tag myapp:${params.IMAGETAG} ${ECR_REPO_URL}/${ECR_REPO_NAME}:latest"

                             sh "docker push ${ECR_REPO_URL}/${ECR_REPO_NAME}:latest"

                             sh "docker push ${ECR_REPO_URL}/${ECR_REPO_NAME}:${params.IMAGETAG}"

                        }
                }
            }
        }

        // stage("Install Aws CLI"){
        //     steps{
        //         sh'''

        //             curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        //             unzip awscliv2.zip
        //             sudo ./aws/install
        //         '''
        //     }
        // }
        stage("Update ECS"){
            steps{
               sh "aws ecs update-service --cluster ${ECS_CLUSTER_NAME} --service  ${ECS_SERVICE_NAME} --force-new-deployment"
            }
        }

    }
    
}




