ipeline{
    agent any
        parameters{
            string(name: 'MYAPP', defaultValue: '1.0.3')
        }
        environment{
            ECR_REPO_URL='389035013580.dkr.ecr.us-east-1.amazonaws.com' // this variable refer to the link of ECR repository
            APP_NAME='fashion-app' // this variable use to give the name of my image into my current docker (ec2 instance)
            ECR_APP_NAME='fashionapp' // this variable use to give the name of my image into ECR
            CRED_ID='ecr:us-east-1:fasionapp_id' // this variable refer to my AWS credential that i put in jenkins
            ECS_CLUST_NAME='fashionCluster' // my ecs cluster name
            ECS_SVC_NAME='fashionapp-svc' // my ecs service name
        }
   
    stages{
        stage("Build & Push in ECR Repository"){
            steps{
                script{
                    // This step should not normally be used in your script. Consult the inline help for details.
                withDockerRegistry(credentialsId: CRED_ID, url: 'https://${ECR_REPO_URL}/') {
                 sh "docker build -t ${APP_NAME}:${params.MYAPP} ."
                 sh "docker tag ${APP_NAME}:${params.MYAPP} ${ECR_REPO_URL}/${ECR_APP_NAME}:${params.MYAPP}" 
                 sh "docker tag ${APP_NAME}:${params.MYAPP} ${ECR_REPO_URL}/${ECR_APP_NAME}:latest"

                 sh "docker push ${ECR_REPO_URL}/${ECR_APP_NAME}:${params.MYAPP}"
                 sh "docker push ${ECR_REPO_URL}/${ECR_APP_NAME}:latest"
                }
              }
           }
        }
        stage("update ECS"){
            steps{
                sh"aws ecs update-service --cluster ${ECS_CLUST_NAME} --service ${ECS_SVC_NAME} --force-new-deployment "
            }
        }

       
    }
}