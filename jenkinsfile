pipeline{
    agent any
        parameters{
            string(name: 'MYAPP', defaultValue: '1.0.3')
        }
        environment{
            ECR_REPO_URL='389035013580.dkr.ecr.us-east-1.amazonaws.com' // this variable refer to the link of ECR repository
            APP_NAME='fashion-app' // this variable use to give the name of my image into my current docker (ec2 instance)
            ECR_APP_NAME='fashionapp' // this variable use to give the name of my image into ECR
            CRED_ID='ecr:us-east-1:fasionapp_id' // this variable refer to my AWS credential that i put in jenkins
            ECS_CLUST_NAME='fashionCluster' // my ecs cluster name
            ECS_SVC_NAME='fashionapp-svc' // my ecs service name
            MY_URL='https://${ECR_REPO_URL}/' 

            SONAR_SCANNER= tool 'sonar'
        }
   
    stages{

        
        stage("Sonar Scan"){
            steps{
                script{
                     withSonarQubeEnv('mySonarQube') {
                    // some block
                        echo "  ${SONAR_SCANNER}"

                        sh '''
                            ${SONAR_SCANNER}/bin/sonar-scanner \
                            -Dsonar.projectKey=${APP_NAME} \
                            -Dsonar.sources=. \
                            -Dsonar.projectName=${APP_NAME} \
                            -Dsonar.java.binaries=.
                        '''
                    }    
                }
               
            }
        }
        
        stage("Scan files"){
            steps{
                sh "trivy fs --format table -o fashion_app.html ."
            }
        }


        stage("Build image"){
            steps{
                sh "docker build -t ${APP_NAME}:${params.MYAPP} ."
                sh "docker tag ${APP_NAME}:${params.MYAPP} ${ECR_REPO_URL}/${ECR_APP_NAME}:${params.MYAPP}" 
                sh "docker tag ${APP_NAME}:${params.MYAPP} ${ECR_REPO_URL}/${ECR_APP_NAME}:latest"
            }
        }

        stage("Scan image build"){
            steps{
                sh "trivy image --format table -o docker_image_fashion.html  ${ECR_REPO_URL}/${ECR_APP_NAME}:latest"
            }
        }

        stage("Push in ECR Repository"){
            steps{
                script{
                    // This step should not normally be used in your script. Consult the inline help for details.
                withDockerRegistry(credentialsId: CRED_ID, url: MY_URL) {
                 sh "docker push ${ECR_REPO_URL}/${ECR_APP_NAME}:${params.MYAPP}"
                 sh "docker push ${ECR_REPO_URL}/${ECR_APP_NAME}:latest"
                }
              }
           }
        }

        stage("update ECS"){
            steps{
                sh"aws ecs update-service --cluster ${ECS_CLUST_NAME} --service ${ECS_SVC_NAME} --force-new-deployment "
            }
        }

       
    }
}